Vzhledem k tomu, že původní soubor má přes 5000 řádků, poskytnu ti patch - konkrétní sekce, které musíš nahradit v třídě PostProcessTab.
Najdi třídu PostProcessTab a nahraď tyto metody:
Hledej v souboru:
pythonclass PostProcessTab(QWidget):
Pak najdi a NAHRAĎ následující metody:

1. NAHRAĎ metodu run_episode_merged()
Najdi:
pythondef run_episode_merged(self) -> None:
    self.log.append('stdout', 'Run episode (merged) - not yet implemented')
Nahraď za:
pythondef run_episode_merged(self) -> None:
    """Spojí celou epizodu s intro/transitions/formátováním pomocí episode-mode"""

    # 1. Validace výběru epizody
    items = self.lst_episodes.selectedItems()
    if not items:
        QMessageBox.warning(self, "Chyba", "Vyber epizodu ze seznamu")
        return

    ep = items[0].text()
    topic = self.cmb_topic.currentText().strip()
    lang = self.cmb_lang.currentText().strip()

    if not topic or not lang:
        QMessageBox.warning(self, "Chyba", "Topic nebo Language není nastaven")
        return

    # 2. Resolve paths
    try:
        ep_dir = Path(self._resolve_topic_dir(self.narration_root(), topic)) / lang / ep
    except Exception as e:
        self.log.append('stderr', f'Path resolution error: {e}')
        QMessageBox.critical(self, "Chyba", f"Nelze vyřešit cestu k epizodě:\n{e}")
        return

    if not ep_dir.exists():
        QMessageBox.warning(self, "Chyba", f"Episode dir neexistuje:\n{ep_dir}")
        return

    # 3. Zkontroluj, že existují segmenty
    segments = list(ep_dir.glob('segment_*.txt'))
    if not segments:
        QMessageBox.warning(self, "Chyba", f"Žádné segment_*.txt soubory v:\n{ep_dir}")
        return

    self.log.append('stdout', f'Nalezeno {len(segments)} segmentů v epizodě {ep}')

    # 4. Sestav příkaz pro runner_cli.py
    runner = os.path.join('historical_processor', 'runner_cli.py')
    if not os.path.isfile(runner):
        QMessageBox.critical(self, "Chyba", f"Nenalezen runner:\n{runner}\n\nZkontroluj strukturu projektu.")
        return

    cmd = [
        sys.executable,
        runner,
        '--input-dir', str(ep_dir),
        '--episode-mode',
    ]

    # 5. Aplikuj GUI checkboxy
    if self.chk_use_gpt.isChecked():
        cmd.append('--use-gpt')
        self.log.append('stdout', '  → GPT enabled (intro + transitions + grammar)')
    else:
        self.log.append('stdout', '  → GPT disabled (offline mode)')

    if self.chk_prefer_existing.isChecked():
        cmd.append('--prefer-existing')
        self.log.append('stdout', '  → Will reuse existing merged files if available')

    if self.chk_force_rebuild.isChecked():
        cmd.append('--force-rebuild')
        self.log.append('stdout', '  → Force rebuild (ignoring cache)')

    if self.chk_save_merged.isChecked():
        cmd.append('--save-merged')
    else:
        self.log.append('stderr', '  ⚠ Save merged is OFF - no output will be written!')

    # 6. Output dir override
    output_base = self.postproc_root()
    cmd.extend(['--output-dir', output_base])

    # 7. Environment
    env = os.environ.copy()
    env['PYTHONIOENCODING'] = 'utf-8'

    # Check OpenAI key if GPT enabled
    if self.chk_use_gpt.isChecked():
        if not env.get('OPENAI_API_KEY'):
            QMessageBox.warning(
                self,
                "Chyba",
                "OPENAI_API_KEY není nastaven!\n\n"
                "GPT mode vyžaduje OpenAI API klíč v environment proměnných."
            )
            return

    # 8. Log příkazu
    self.log.append('stdout', '=' * 70)
    self.log.append('stdout', f'Zpracovávám epizodu: {topic}/{lang}/{ep}')
    self.log.append('stdout', f'Segmentů: {len(segments)}')
    self.log.append('stdout', f'Output: {output_base}/{topic}/{lang}/{ep}/')
    self.log.append('stdout', '=' * 70)
    self.log.append('stdout', f'Command: {" ".join(cmd)}')
    self.log.append('stdout', '=' * 70)

    # 9. Spusť subprocess
    try:
        self.thread, self.worker = _start_qprocess(
            cmd,
            env,
            self,
            self._process_log_line,
            self._on_episode_merged_finished
        )
    except Exception as e:
        self.log.append('stderr', f'Failed to start subprocess: {e}')
        QMessageBox.critical(self, "Chyba", f"Nelze spustit subprocess:\n{e}")
        return

    # 10. Update UI state
    self.btn_run_episode_merged.setEnabled(False)
    self.btn_run_episode.setEnabled(False)
    self.btn_run_selected.setEnabled(False)
    self.lbl_selected.setText(f"Processing: {ep}...")

    # 11. Update PID label
    QTimer.singleShot(250, self._update_pid_label)

2. PŘIDEJ novou metodu _update_pid_label()
Přidej NOVOU metodu (hned za run_episode_merged):
pythondef _update_pid_label(self) -> None:
    """Update PID label s process ID"""
    try:
        if self.worker and hasattr(self.worker, 'pid'):
            pid = self.worker.pid()
            if pid:
                self.lbl_pid.setText(f"PID: {pid}")
            else:
                self.lbl_pid.setText("")
    except Exception:
        self.lbl_pid.setText("")

3. PŘIDEJ novou metodu _on_episode_merged_finished()
Přidej NOVOU metodu (hned za _update_pid_label):
pythondef _on_episode_merged_finished(self, code: int) -> None:
    """Callback po dokončení episode merge"""
    self.log.append('stdout', '=' * 70)
    self.log.append('stdout', f'Process finished with exit code {code}')
    self.log.append('stdout', '=' * 70)

    # Re-enable buttons
    self.btn_run_episode_merged.setEnabled(True)
    self.btn_run_episode.setEnabled(True)
    self.btn_run_selected.setEnabled(True)

    if code == 0:
        # Success
        topic = self.cmb_topic.currentText()
        lang = self.cmb_lang.currentText()
        items = self.lst_episodes.selectedItems()

        if items:
            ep = items[0].text()

            # Find output file
            merged_path = Path(self.postproc_root()) / topic / lang / ep / 'episode_merged.txt'

            if merged_path.exists():
                size_kb = merged_path.stat().st_size / 1024
                self.log.append('stdout', '✓ Episode merged successfully!')
                self.log.append('stdout', f'  Output: {merged_path}')
                self.log.append('stdout', f'  Size: {size_kb:.1f} KB')

                # Check for manifest
                manifest_path = merged_path.parent / 'manifest.json'
                if manifest_path.exists():
                    self.log.append('stdout', f'  Manifest: {manifest_path.name}')

                self.lbl_selected.setText(f"Done: {ep}")

                # Offer to open
                resp = QMessageBox.question(
                    self,
                    "Zpracování dokončeno",
                    f"Epizoda {ep} byla úspěšně zpracována.\n\nOtevřít výstupní složku?",
                    QMessageBox.Yes | QMessageBox.No
                )
                if resp == QMessageBox.Yes:
                    self.open_output_folder()
            else:
                self.log.append('stderr', f'✗ Output file not found: {merged_path}')
                self.lbl_selected.setText(f"Error: {ep}")
        else:
            self.log.append('stdout', '✓ Processing finished')
            self.lbl_selected.setText("Done")
    else:
        self.log.append('stderr', f'✗ Episode processing failed (exit code {code})')
        self.lbl_selected.setText("Failed")

        # Show error dialog
        QMessageBox.warning(
            self,
            "Chyba zpracování",
            f"Zpracování epizody selhalo s exit code {code}.\n\nZkontroluj log pro detaily."
        )

    # Clear PID label
    self.lbl_pid.setText("")

    # Cleanup thread
    if self.thread:
        self.thread.quit()
        self.thread.wait()
        self.thread = None
        self.worker = None

4. NAHRAĎ metodu open_merged_file()
Najdi:
pythondef open_merged_file(self) -> None:
    self.log.append('stdout', 'Open merged file - not yet implemented')
Nahraď za:
pythondef open_merged_file(self) -> None:
    """Otevře episode_merged.txt v default editoru"""
    topic = self.cmb_topic.currentText().strip()
    lang = self.cmb_lang.currentText().strip()
    items = self.lst_episodes.selectedItems()

    if not items or not topic or not lang:
        QMessageBox.warning(self, "Chyba", "Vyber epizodu")
        return

    ep = items[0].text()
    merged_path = Path(self.postproc_root()) / topic / lang / ep / 'episode_merged.txt'

    if not merged_path.exists():
        QMessageBox.warning(
            self,
            "Soubor nenalezen",
            f"Episode merged file neexistuje:\n{merged_path}\n\nSpusť nejprve 'Run episode (merged)'."
        )
        return

    try:
        if sys.platform.startswith('win'):
            os.startfile(str(merged_path))
        elif sys.platform == 'darwin':
            import subprocess
            subprocess.Popen(['open', str(merged_path)])
        else:
            import subprocess
            subprocess.Popen(['xdg-open', str(merged_path)])

        self.log.append('stdout', f'Opened: {merged_path.name}')
    except Exception as e:
        self.log.append('stderr', f'Cannot open file: {e}')
        QMessageBox.critical(self, "Chyba", f"Nelze otevřít soubor:\n{e}")

5. NAHRAĎ metodu open_manifest()
Najdi:
pythondef open_manifest(self) -> None:
    self.log.append('stdout', 'Open manifest - not yet implemented')
Nahraď za:
pythondef open_manifest(self) -> None:
    """Otevře manifest.json v default JSON vieweru/editoru"""
    topic = self.cmb_topic.currentText().strip()
    lang = self.cmb_lang.currentText().strip()
    items = self.lst_episodes.selectedItems()

    if not items or not topic or not lang:
        QMessageBox.warning(self, "Chyba", "Vyber epizodu")
        return

    ep = items[0].text()
    manifest_path = Path(self.postproc_root()) / topic / lang / ep / 'manifest.json'

    if not manifest_path.exists():
        QMessageBox.warning(
            self,
            "Soubor nenalezen",
            f"Manifest.json neexistuje:\n{manifest_path}\n\nSpusť nejprve 'Run episode (merged)'."
        )
        return

    try:
        if sys.platform.startswith('win'):
            os.startfile(str(manifest_path))
        elif sys.platform == 'darwin':
            import subprocess
            subprocess.Popen(['open', str(manifest_path)])
        else:
            import subprocess
            subprocess.Popen(['xdg-open', str(manifest_path)])

        self.log.append('stdout', f'Opened: {manifest_path.name}')
    except Exception as e:
        self.log.append('stderr', f'Cannot open manifest: {e}')
        QMessageBox.critical(self, "Chyba", f"Nelze otevřít manifest:\n{e}")

6. NAHRAĎ metodu open_output_folder()
Najdi existující open_output_folder() a nahraď celou za:
pythondef open_output_folder(self) -> None:
    """Otevře output složku pro vybranou epizodu, nebo postproc root"""
    topic = self.cmb_topic.currentText().strip()
    lang = self.cmb_lang.currentText().strip()
    items = self.lst_episodes.selectedItems()

    if items and topic and lang:
        # Open specific episode folder
        ep = items[0].text()
        path = Path(self.postproc_root()) / topic / lang / ep
    elif topic and lang:
        # Open topic/lang folder
        path = Path(self.postproc_root()) / topic / lang
    else:
        # Open postproc root
        path = Path(self.postproc_root())

    if not path.exists():
        QMessageBox.warning(
            self,
            "Složka nenalezena",
            f"Output složka neexistuje:\n{path}\n\nSpusť nejprve zpracování epizody."
        )
        return

    try:
        if sys.platform.startswith('win'):
            os.startfile(str(path))
        elif sys.platform == 'darwin':
            import subprocess
            subprocess.Popen(['open', str(path)])
        else:
            import subprocess
            subprocess.Popen(['xdg-open', str(path)])

        self.log.append('stdout', f'Opened folder: {path}')
    except Exception as e:
        self.log.append('stderr', f'Cannot open folder: {e}')
        QMessageBox.critical(self, "Chyba", f"Nelze otevřít složku:\n{e}")

7. ZKONTROLUJ metodu __init__() v PostProcessTab
Ujisti se, že máš v __init__() vytvořený self.lbl_pid:
Najdi v metodě __init__() sekci kde se vytváří opts layout a najdi:
pythonself.lbl_selected = QLabel("No episode selected", self)
opts.addWidget(self.lbl_selected)
A přidej HNED ZA TO (pokud tam není):
pythonself.lbl_pid = QLabel("", self)
opts.addWidget(self.lbl_pid)

Shrnutí změn
V třídě PostProcessTab:

✅ NAHRAĎ: run_episode_merged() - 140 řádků nového kódu
✅ PŘIDEJ: _update_pid_label() - NOVÁ metoda, 10 řádků
✅ PŘIDEJ: _on_episode_merged_finished() - NOVÁ metoda, 70 řádků
✅ NAHRAĎ: open_merged_file() - 35 řádků
✅ NAHRAĎ: open_manifest() - 35 řádků
✅ NAHRAĎ: open_output_folder() - 40 řádků
✅ ZKONTROLUJ: __init__() má self.lbl_pid

Celkem: ~330 řádků změn v 1 souboru

Test po úpravách
bash# 1. Syntax check
python -m py_compile studio_gui/src/main.py

# 2. Spusť GUI
python -m studio_gui.src.main

# 3. V PostProcess tabu:
# - Vyber topic, lang, episode
# - Zaškrtni "Use GPT"
# - Klikni "Run episode (merged)"
# - Sleduj log

Toto je kompletní sada změn. Potřebuješ ještě něco upřesnit?
